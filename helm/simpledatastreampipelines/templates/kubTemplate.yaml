apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.nameSourceSink }}
type: Opaque
data:
  {{- range $key, $val := .Values.envSourceSink.secret }}
  {{ $key }}: {{ $val | b64enc }}
  {{- end}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.nameDb }}
type: Opaque
data:
  {{- range $key, $val := .Values.envDb.secret }}
  {{ $key }}: {{ $val | b64enc }}
  {{- end}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.nameKafka }}
type: Opaque
data:
  {{- range $key, $val := .Values.envKafka.secret }}
  {{ $key }}: {{ $val | b64enc }}
  {{- end}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.nameSoapToDb}}
type: Opaque
data:
  {{- range $key, $val := .Values.envSoapToDb.secret }}
    {{ $key }}: {{ $val | b64enc }}
    {{- end}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secret.nameDatabaseToRest}}
type: Opaque
data:
  {{- range $key, $val := .Values.envDatabaseToRest.secret }}
    {{ $key }}: {{ $val | b64enc }}
    {{- end}}
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: {{ .Values.persistentVolumeName }}
  labels:
    type: local
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /data/postgres{{ .Values.dbImageVersion }}
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.volumeClaimName }}
  labels:
    app: postgrespv
spec:  
  accessModes:
    - ReadWriteOnce
  # storageClassName: local-storage
  storageClassName: manual
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.dbPodName }}
  labels:
    purpose: {{ .Values.dbPodName }}
spec:
  containers:
    - name: {{ .Values.dbContainerName }}
      image: "{{ .Values.dbImageName }}:{{ .Values.dbImageVersion }}"
      args: [" -c wal_level=logical"]
  restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.dbName }}
  labels:
    app: {{ .Values.dbName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.dbName }}
  template:
    metadata:
      labels:
        app: {{ .Values.dbName }}
    spec:
      containers:
      - name: {{ .Values.dbContainerName }}
        image: "{{ .Values.dbImageName }}:{{ .Values.dbImageVersion }}"
        resources:
          limits:
            memory: "2G"
            cpu: "1.5"
          requests:
            memory: "1G"
            cpu: "0.5"
        env:
          {{- include "helpers.list-envDb-variables" . | indent 10 }}
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: hostvol
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: hostvol
        persistentVolumeClaim:
          claimName: {{ .Values.volumeClaimName }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.dbServiceName }}
  labels:
    app: {{ .Values.dbServiceName }}
spec:
  ports:
  - port: 5432
    protocol: TCP
  selector:
    app: {{ .Values.dbName }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kafkaName }}
  labels:
    app: {{ .Values.kafkaName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.kafkaName }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafkaName }}    
    spec:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      containers:
      - name: {{ .Values.kafkaName }}
        image: "{{ .Values.kafkaImageName }}:{{ .Values.kafkaImageVersion }}"
        resources:
          limits:
            memory: "1G"
            cpu: "0.7"
          requests:
            memory: "768M"
            cpu: "0.1"
        env:
          {{- include "helpers.list-envKafka-variables" . | indent 10 }}
        ports:
        - containerPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafkaServiceName }}
  labels:
    app: {{ .Values.kafkaServiceName }}
spec:
  ports:
  - name: tcp-client
    port: 9092
    protocol: TCP
  - name: tcp-interbroker
    port: 9093
    protocol: TCP
    targetPort: 9093
  selector:
    app: {{ .Values.kafkaName }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.sourceSinkAppName }}
  labels:
    app: {{ .Values.sourceSinkAppName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.sourceSinkAppName }}
  template:
    metadata:
      labels:
        app: {{ .Values.sourceSinkAppName }}
    spec:
      containers:
      - name: {{ .Values.sourceSinkAppName }}
        image: "{{ .Values.sourceSinkImageName }}:{{ .Values.sourceSinkImageVersion }}"
        imagePullPolicy: Always
        resources:
          limits:
            memory: "384M"
            cpu: "1"
          requests:
            memory: "256M"
            cpu: "0.5"
        env:
          {{- include "helpers.list-env-source-sink-variables" . | indent 10 }}
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: "/actuator/health/livenessState"
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: "/actuator/health/readinessState"
            port: 8080
          failureThreshold: 60
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.sourceSinkServiceName }}
  labels:
    run: {{ .Values.sourceSinkServiceName }}
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
  selector:
    app: {{ .Values.sourceSinkAppName }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.soapToDbAppName }}
  labels:
    app: {{ .Values.soapToDbAppName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.soapToDbAppName }}
  template:
    metadata:
      labels:
        app: {{ .Values.soapToDbAppName }}
    spec:
      containers:
        - name: {{ .Values.soapToDbAppName }}
          image: "{{ .Values.soapToDbImageName }}:{{ .Values.soapToDbImageVersion }}"
          imagePullPolicy: Always
          resources:
            limits:
              memory: "384M"
              cpu: "1"
            requests:
              memory: "256M"
              cpu: "0.5"
          env:
            {{- include "helpers.list-env-soap-to-db-variables" . | indent 10 }}
          ports:
            - containerPort: 8082
          livenessProbe:
            httpGet:
              path: "/actuator/health/livenessState"
              port: 8082
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: "/actuator/health/readinessState"
              port: 8082
            failureThreshold: 60
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.soapToDbServiceName }}
  labels:
    run: {{ .Values.soapToDbServiceName }}
spec:
  ports:
    - port: 8082
      protocol: TCP
  selector:
    app: {{ .Values.soapToDbAppName }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.databaseToRestAppName }}
  labels:
    app: {{ .Values.databaseToRestAppName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.databaseToRestAppName }}
  template:
    metadata:
      labels:
        app: {{ .Values.databaseToRestAppName }}
    spec:
      containers:
        - name: {{ .Values.databaseToRestAppName }}
          image: "{{ .Values.databaseToRestImageName }}:{{ .Values.databaseToRestImageVersion }}"
          imagePullPolicy: Always
          resources:
            limits:
              memory: "384M"
              cpu: "1"
            requests:
              memory: "256M"
              cpu: "0.5"
          env:
            {{- include "helpers.list-env-database-to-rest-variables" . | indent 10 }}
          ports:
            - containerPort: 8081
          livenessProbe:
            httpGet:
              path: "/actuator/health/livenessState"
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: "/actuator/health/readinessState"
              port: 8081
            failureThreshold: 60
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.databaseToRestServiceName }}
  labels:
    run: {{ .Values.databaseToRestServiceName }}
spec:
  ports:
    - port: 8082
      protocol: TCP
  selector:
    app: {{ .Values.databaseToRestAppName }}